const mongoose = require('mongoose');
const container = require("../configurations/container");
const Subscriber = mongoose.model('Subscriber');
const Subscription = mongoose.model('Subscription');
const BillingHistory = mongoose.model('BillingHistory');
const User = mongoose.model('User');

const createCsvWriter = require('csv-writer').createObjectCsvWriter;
const fs = require('fs');
const csvParser = require('csv-parser');

const billinghistoryRepo = container.resolve('billingHistoryRepository');
const subscriptionRepo = container.resolve('subscriptionRepository');

var nodemailer = require('nodemailer');
var usersRepo = container.resolve('userRepository');
var viewLogsRepo = require('../repos/ViewLogRepo');

var pageViews = require('../controllers/PageViews');
const SubscriberRepository = require('./SubscriberRepo');
const { resolve } = require('path');


let currentDate = null;
currentDate = getCurrentDate();

let paywallTotalBase = currentDate+"_PaywallTotalBase.csv";
let paywallTotalBaseFilePath = `./${paywallTotalBase}`;

let ActiveBase = currentDate+"_ActiveBase.csv";
let ActiveBaseFilePath = `./${ActiveBase}`;

let paywallExpiredBase = currentDate+"_PaywallExpiredBase.csv";
let paywallExpiredBaseFilePath = `./${paywallExpiredBase}`;

let paywallInActiveBase = currentDate+"_PaywallInActiveBase.csv";
let paywallInActiveBaseFilePath = `./${paywallInActiveBase}`;

let paywallRevFileName = currentDate+"_PaywallRevReport.csv";
let paywallRevFilePath = `./${paywallRevFileName}`;

let paywallUnsubReport = currentDate+"_UnsubReport.csv";
let paywallUnsubFilePath = `./${paywallUnsubReport}`;

let paywallChannelWiseUnsubReport = currentDate+"_ChannelWiseUnsub.csv";
let paywallChannelWiseUnsubReportFilePath = `./${paywallChannelWiseUnsubReport}`;

let paywallChannelWiseTrial = currentDate+"_ChannelWiseTrial.csv";
let paywallChannelWiseTrialFilePath = `./${paywallChannelWiseTrial}`;

let paywallErrorCountReport = currentDate+"_ErrorCountReport.csv";
let paywallErrorCountFilePath = `./${paywallErrorCountReport}`;

let paywallErrorCountReportBySource = currentDate+"_ErrorCountReportBySource.csv";
let paywallErrorCountBySourceFilePath = `./${paywallErrorCountReportBySource}`;

let paywallFullAndPartialChargedReport = currentDate+"_FullAndPartialCharged.csv";
let paywallFullAndPartialChargedReportFilePath = `./${paywallFullAndPartialChargedReport}`;

let paywallCallbackReport = currentDate+"_CallbackReport.csv";
let paywallCallbackFilePath = `./${paywallCallbackReport}`;

let paywallTrialToBilledUsers = currentDate+"_TrialToBilled.csv";
let paywallTrialToBilledUsersFilePath = `./${paywallTrialToBilledUsers}`;

let affiliatePvs = currentDate+"_AffiliatePageViews.csv";
let affiliatePvsFilePath = `./${affiliatePvs}`;

let dailyNetAdditionCsv = currentDate+"_DailyNetAdditions.csv";
let dailyNetAdditionFilePath = `./${dailyNetAdditionCsv}`;

let usersReportWithTrialAndBillingHistory = currentDate+"_UsersReportWithTrialAndBillingHistory.csv";
let usersReportWithTrialAndBillingHistoryFilePath = `./${usersReportWithTrialAndBillingHistory}`;

let dateWiseChargingDetails = currentDate+"_DateWiseChargingDetails.csv";
let dateWiseChargingDetailsFilePath = `./${dateWiseChargingDetails}`;
let dateWiseChargingDetailsWriter = createCsvWriter({
    path: dateWiseChargingDetailsFilePath,
    header: [
        {id: 'date', title: 'Date'},
        {id: "count",title: "Billing Count" }
    ]
});



let randomReport = currentDate+"_RandomReport.csv";
let randomReportFilePath = `./${randomReport}`;

const csvWriter = createCsvWriter({
    path: paywallRevFilePath,
    header: [
        {id: 'date', title: 'Date'},
        {id: 'newUser', title: 'Number Verified Users'},
        {id: 'newSubscriber', title: 'New Subscribers'},
        {id: 'totalSubscribers', title: 'Total Subscribers'},
        {id: 'trials', title: 'Trials Activated'},
        {id: 'tempTotalActiveSubscribers',title: 'Total Active Subscribers'},

        {id: 'liveOnlyCount', title: 'Live Daily'},
        {id: 'liveWeeklyCount', title: 'Live Weekly'},
        {id: 'comedyOnlyCount', title: 'Comedy Daily'},
        {id: 'comedyWeeklyCount', title: 'Comedy Weekly'},

        {id: 'liveOnlyRevenue', title: 'Live Daily Revenue'},
        {id: 'liveWeeklyRevenue', title: 'Live Weekly Revenue'},
        {id: 'comedyOnlyRevenue', title: 'Comedy Daily Revenue'},
        {id: 'comedyWeeklyRevenue', title: 'Comedy Weekly Revenue'},
        {id: 'totalRevenue',title: 'Total Revenue'}

    ]
});

const monthNames = ["January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
];

const dailyNetAdditionWriter = createCsvWriter({
    path: dailyNetAdditionFilePath,
    header: [
        {id: 'date', title: 'Date'},
        {id: 'subs', title: 'Subscriptions'},
        {id: "unsubs",title: "Un-Subscriptions" },
        {id: "net",title: "Net Subscriptions" },
    ]
});

const csvReportWriter = createCsvWriter({
    path: paywallCallbackFilePath,
    header: [
        {id: 'tid', title: 'TID'},
        {id: 'mid', title: 'MID'},
        {id: "isValidUser",title: "Is Valid Telenor User" },
        {id: "isCallbAckSent",title: "IS CallBack Sent" },
        {id: 'added_dtm', title: 'User TIMESTAMP'},
        {id: 'callBackSentTime', title: 'TIMESTAMP'}
    ]
});

const csvTotalBase = createCsvWriter({
    path: paywallTotalBaseFilePath,
    header: [
        {id: 'msisdn', title: 'Msisdn'},
    ]
});

const csvExpiredBase = createCsvWriter({
    path: paywallExpiredBaseFilePath,
    header: [
        {id: 'msisdn', title: 'Msisdn'},
    ]
});

const csvInActiveBase = createCsvWriter({
    path: paywallInActiveBaseFilePath,
    header: [
        {id: 'msisdn', title: 'Msisdn'},
    ]
});

const ActiveBaseWriter = createCsvWriter({
    path: ActiveBaseFilePath,
    header: [
        {id: 'msisdn', title: 'Msisdn'},
    ]
});

const csvFullAndPartialCharged = createCsvWriter({
    path: paywallFullAndPartialChargedReportFilePath,
    header: [
        {id: 'date', title: 'Date'},
        {id: 'fully_charged_users', title: 'Fully Charged Users'},
        {id: "partially_charged_users",title: "Partially Charged Users" },
        {id: 'total', title: 'Total'}
    ]
});

const csvTrialToBilledUsers = createCsvWriter({
    path: paywallTrialToBilledUsersFilePath,
    header: [
        {id: 'trial_date', title: 'Trial Activation Date'},
        {id: 'billed_date', title: "Successfull Billing Date"},
        //{id: 'msisdn', title: 'List of MSISDNs'},
        {id: 'total', title: 'Total Count'}
    ]
});

const randomReportWriter = createCsvWriter({
    path: randomReportFilePath,
    header: [
        {id: 'msisdn', title: 'Msisdn'},
        {id: 'acquisition_source', title: 'Acquisition Source'},
        {id: 'acquisition_date', title: 'Acquisition Date'},
        {id: 'number_of_success_charging', title: 'No of time user successfully charged'},
        {id: "unsub_date",title: "Unsubscription Date" }
    ]
});

const csvAffiliatePvs = createCsvWriter({
    path: affiliatePvsFilePath,
    header: [
        {id: 'date', title: 'Date'},
        {id: 'source',title: "Source"},
        {id: 'mid',title: "MID"},
        {id: 'count', title: "Page Views"},
    ]
});

const usersReportWithTrialAndBillingHistoryWriter = createCsvWriter({
    path: usersReportWithTrialAndBillingHistoryFilePath,
    header: [
        {id: 'mid', title: 'Mid'},
        {id: 'user_id',title: "Auto Generated Id"},
        {id: 'code',title: "Code"},
        {id: 'success_transactions', title: "Success Transactions"},
        {id: 'amount', title: "Amount"},
    ]
});

var transporter = nodemailer.createTransport({
    host: "mail.dmdmax.com.pk",
    port: 465,
    secure: true, // true for 465, false for other ports
    auth: {
      user: 'reports@goonj.pk', // generated ethereal user
      pass: 'YiVmeCPtzJn39Mu' // generated ethereal password
    }
});

generateReportForAcquisitionSourceAndNoOfTimeUserBilled4 = async() => {
    console.log("=> generateReportForAcquisitionSourceAndNoOfTimeUserBilled4");
    
    let finalResult = [];
    let inputData = [

    ];
    
    try{
        for(let i = 0; i < inputData.length; i++){
            if(inputData[i] && inputData[i].length === 11){
                let singleRecord = await usersRepo.getData(inputData[i]);
                if(singleRecord.length > 0){
                    singleRecord = singleRecord[0];
                    let singObject = {
                        msisdn: singleRecord.msisdn,
                        acquisition_date: singleRecord.acquisition_date,
                        number_of_success_charging: singleRecord.total_successful_chargings
                    };
    
                    if(singleRecord.acquisition_mid){
                        singObject.acquisition_source = singleRecord.acquisition_mid;
                    }else{
                        if(singleRecord.acquisition_source === 'affiliate_web'){
                            singObject.acquisition_source = 'web';
                        }else{
                            singObject.acquisition_source = singleRecord.acquisition_source;
                        }
                        
                    }
            
                    let expiryHistory = {};
                    if(singleRecord.subscription_status === 'expired'){
                        expiryHistory = await billinghistoryRepo.getExpiryHistory(singleRecord.user_id);
                        if(expiryHistory.length >= 2){
                            expiryHistory.sort(function(a,b){
                                return new Date(b.billing_dtm) - new Date(a.billing_dtm);
                            });
                        }
            
                        singObject.unsub_date = expiryHistory[0].billing_dtm;
                    }
        
                    finalResult.push(singObject);
                    console.log("=> Data done for item ", i);
                }
            }else{
                console.log("=> Invalid number or number length");
            }
        }
    
        console.log("=> Sending email");
        await randomReportWriter.writeRecords(finalResult);
        let info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk',
            to:  ["farhan.ali@dmdmax.com"],
            subject: `Complaint Data`, // Subject line
            text: `This report contains the details of msisdns being sent us over email from Zara`,
            attachments:[
                {
                    filename: randomReport,
                    path: randomReportFilePath
                }
            ]
        });
    
        console.log("=> [randomReport][emailSent]",info);
        fs.unlink(randomReportFilePath,function(err,data) {
            if (err) {
                console.log("=> File not deleted[randomReport]");
            }
            console.log("=> File deleted [randomReport]");
        });
    }catch(e){
        console.log("=> error - ",JSON.stringify(e));
    }
}

generateReportForAcquisitionSourceAndNoOfTimeUserBilled3 = async() => {
    console.log("=> generateReportForAcquisitionSourceAndNoOfTimeUserBilled3");
    
    let finalResult = [];
    let inputData = [

    ];
    
    try{
        for(let i = 0; i < inputData.length; i++){
            if(inputData[i] && inputData[i].length === 11){
                let singleRecord = await usersRepo.getData(inputData[i]);
                if(singleRecord.length > 0){
                    singleRecord = singleRecord[0];
                    let singObject = {
                        msisdn: singleRecord.msisdn,
                        acquisition_date: singleRecord.acquisition_date,
                        number_of_success_charging: singleRecord.total_successful_chargings
                    };
    
                    if(singleRecord.acquisition_mid){
                        singObject.acquisition_source = singleRecord.acquisition_mid;
                    }else{
                        if(singleRecord.acquisition_source === 'affiliate_web'){
                            singObject.acquisition_source = 'web';
                        }else{
                            singObject.acquisition_source = singleRecord.acquisition_source;
                        }
                        
                    }
            
                    let expiryHistory = {};
                    if(singleRecord.subscription_status === 'expired'){
                        expiryHistory = await billinghistoryRepo.getExpiryHistory(singleRecord.user_id);
                        if(expiryHistory.length >= 2){
                            expiryHistory.sort(function(a,b){
                                return new Date(b.billing_dtm) - new Date(a.billing_dtm);
                            });
                        }
            
                        singObject.unsub_date = expiryHistory[0].billing_dtm;
                    }
        
                    finalResult.push(singObject);
                    console.log("=> Data done for item ", i);
                }
            }else{
                console.log("=> Invalid number or number length");
            }
        }
    
        console.log("=> Sending email");
        await randomReportWriter.writeRecords(finalResult);
        let info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk',
            to:  ["farhan.ali@dmdmax.com"],
            subject: `Complaint Data`, // Subject line
            text: `This report contains the details of msisdns being sent us over email from Zara`,
            attachments:[
                {
                    filename: randomReport,
                    path: randomReportFilePath
                }
            ]
        });
    
        console.log("=> [randomReport][emailSent]",info);
        fs.unlink(randomReportFilePath,function(err,data) {
            if (err) {
                console.log("=> File not deleted[randomReport]");
            }
            console.log("=> File deleted [randomReport]");
        });
    }catch(e){
        console.log("=> error - ",JSON.stringify(e));
    }
}

generateReportForAcquisitionSourceAndNoOfTimeUserBilled2 = async() => {
    console.log("=> generateReportForAcquisitionSourceAndNoOfTimeUserBilled2");
    
    let finalResult = [];
    let inputData = [
        "03407354508" ,"03458070426" ,"03408891606" ,"03411407226" ,"03497044564" ,"03449659242" ,"03421631705" ,"03479106199" ,"03487967709" ,"03454974506" ,"03414429464" ,"03445301225" ,"03413132063" ,"03415376117" ,"03453614891" ,"03456465004" ,"03423165184" ,"03454336875" ,"03445698396" ,"03444087415" ,"03410715783" ,"03457138542" ,"03443096080" ,"03059334433" ,"03484154691" ,"03446627791" ,"03490763621" ,"03434067614" ,"03474471560" ,"03444569998" ,"03471981601" ,"03449203912" ,"03464024344" ,"03427653463" ,"03487223236" ,"03458319532" ,"03446140583" ,"03474437668" ,"03490786891" ,"03486269760" ,"03477344277" ,"03446616953" ,"03470322285" ,"03404288731" ,"03499126156" ,"03458604252" ,"03462627476" ,"03400505037" ,"03434349041" ,"03447580880" ,"03448502269" ,"03434010695" ,"03432727347" ,"03463692192" ,"03436462654" ,"03014733951" ,"03014112608" ,"03446875313" ,"03417079398" ,"03486622800" ,"03446094966" ,"03467986089" ,"03452999323" ,"03499003346" ,"03478785257" ,"03214272702" ,"03496194916" ,"03478890957" ,"03451487226" ,"03497509768" ,"03455904825" ,"03417562740" ,"03471823651" ,"03493390241" ,"03420853900" ,"03464865569" ,"03478989647" ,"03428253870" ,"03417126429" ,"03444933650" ,"03410989684" ,"03437469910" ,"03453667229" ,"03494088281" ,"03463178402" ,"03468413526" ,"03448391718" ,"03481570854" ,"03444571121" ,"03439705337" ,"03442761636" ,"03416269594" ,"03430790127" ,"03442617709" ,"03464921835" ,"03466926786" ,"03488819245" ,"03428365806" ,"03465239182" ,"03477500061" ,"03462141970" ,"03449784846" ,"03497839210" ,"03410068757" ,"03447061436" ,"03497441930" ,"03439647752" ,"03484885955" ,"03459519086" ,"03449191203" ,"03412719127" ,"03406916633" ,"03427701449" ,"03445116575" ,"03466655644" ,"03474683705" ,"03438729707" ,"03435153343" ,"03455332393" ,"03457013417" ,"03450549659" ,"03403723076" ,"03495882476" ,"03427316923" ,"03476189198" ,"03479081722" ,"03466633752" ,"03479548636" ,"03467195061" ,"03423885098" ,"03447268176" ,"03416708635" ,"03451296692" ,"03443856711" ,"03329757412" ,"03473555933" ,"03456940682" ,"03435234235" ,"03415089564" ,"03413664207" ,"03469677996" ,"03439500672" ,"03477056263" ,"03499418102" ,"03417932740" ,"03452298828" ,"03082178963" ,"03477465005" ,"03477424899" ,"03499209040" ,"03423952994" ,"03468858745" ,"03493368902" ,"03490019430" ,"03499397928" ,"03434989918" ,"03482042662" ,"03468839421" ,"03477571699" ,"03456963973" ,"03495746634" ,"03474739515" ,"03482129162" ,"03477196550" ,"03444333953" ,"03433077412" ,"03442791848" ,"03408646210" ,"03444809342" ,"03427724932" ,"03445390116" ,"03436841277" ,"03446840065" ,"03489136399" ,"03431535434" ,"03447451267" ,"03495007561" ,"03481455345" ,"03415616479" ,"03468658306" ,"03476581498" ,"03499583730" ,"03457372215" ,"03462578927" ,"03424609917" ,"03434483397" ,"03485812797" ,"03469490904" ,"03465373964" ,"03463838614" ,"03491641218" ,"03453521921" ,"03444642281" ,"03457485364" ,"03479111203" ,"03216018147" ,"03464786028" ,"03482866800" ,"03471921019" ,"03487441432" ,"03102641486" ,"03432084219" ,"03436082898" ,"03421445717" ,"03440912298" ,"03466318984" ,"03404624520" ,"03423888645" ,"03404892426" ,"03413916732" ,"03462086658" ,"03435946570" ,"03440206121" ,"03408720643" ,"03473038001" ,"03491485088" ,"03459541581" ,"03476529844" ,"03447121208" ,"03425792686" ,"03458634057" ,"03404449499" ,"03466453258" ,"03447519039" ,"03484282844" ,"03444028027" ,"03442883895" ,"03426192056" ,"03424634951" ,"03468177532" ,"03464950823" ,"03459617359" ,"03438230798" ,"03475604676" ,"03414605960" ,"03455305557" ,"03474989489" ,"03455845528" ,"03401833331" ,"03411433054" ,"03403213178" ,"03433342418" ,"03412521117" ,"03491169793" ,"03405412439" ,"03449177711" ,"03455630582" ,"03407216827" ,"03437648055" ,"03478457390" ,"03402148445" ,"03496001903" ,"03452792468" ,"03446250991" ,"03424286241" ,"03234265213" ,"03421461303" ,"03404656211" ,"03461385285" ,"03468006981" ,"03435918199" ,"03494910336" ,"03486203179" ,"03449439248" ,"03457711575" ,"03416700592" ,"03448330088" ,"03467669477" ,"03470116240" ,"03459887405" ,"03492645513" ,"03478940719" ,"03448467292" ,"03489745557" ,"03464237372" ,"03409790552" ,"03445404700" ,"03461566145" ,"03457744804" ,"03448921100" ,"03429325389" ,"03461256674" ,"03414850489" ,"03456981563" ,"03439185365" ,"03466805794" ,"03328873883" ,"03411035661" ,"03410648726" ,"03475536696" ,"03414850489" ,"03489648737" ,"03067891071" ,"03434413419" ,"03494041878" ,"03499453519" ,"03488192755" ,"03362646668" ,"03456996054" ,"03444983364" ,"03400482009" ,"03453481520" ,"03439246211" ,"03466475227" ,"03455058952" ,"03446601985" ,"03443092604" ,"03457855297" ,"03446669748" ,"03429535841" ,"03452318352" ,"03417459755" ,"03438188782" ,"03491141314" ,"03454702186" ,"03416298115" ,"03456127358" ,"03454649967" ,"03464183210" ,"03444406815" ,"03497672819" ,"03457848843" ,"03466473375" ,"03481999068" ,"03462017995" ,"03416280508" ,"03428820522" ,"03449813944" ,"03446247185" ,"03362799110" ,"03451268977" ,"03434518060" ,"03484995817" ,"03427895292" ,"03469355591" ,"03477772047" ,"03484781171" ,"03472123518" ,"03434813567" ,"03483799399" ,"03432868268" ,"03469824022" ,"03474336616" ,"03401177072" ,"03463410369" ,"03457213313" ,"03464242650" ,"03444291732" ,"03459472304" ,"03476100910" ,"03415328705" ,"03409859944" ,"03409014362" ,"03437078957" ,"03468670880" ,"03426663486" ,"03443203252" ,"03432205455" ,"03414932440" ,"03447614145" ,"03150010789" ,"03126363471" ,"03333125788" ,"03417069630" ,"03436651843" ,"03449112225" ,"03445348275" ,"03457906717" ,"03411588401" ,"03498311668" ,"03454230055" ,"03454220089" ,"03454369112" ,"03426908515" ,"03456724434" ,"03484546781" ,"03498254048" ,"03400142121" ,"03435543437" ,"03467462724" ,"03457524246" ,"03450786203" ,"03402608624" ,"03454537890" ,"03423747295" ,"03456706697" ,"03402821647" ,"03423981200" ,"03432042732" ,"03211607852" ,"03421618456" ,"03471259148" ,"03472499884" ,"03444807834" ,"03132810653" ,"03435557381" ,"03209207345" ,"03403577062" ,"03458780060" ,"03065126457" ,"03403577062" ,"03478952645" ,"03498448206" ,"03424072047" ,"03246457549" ,"03484050611" ,"03469490107" ,"03486059921" ,"03458940246" ,"03464761129" ,"03459815856" ,"03444900062" ,"03490409685" ,"03442589982" ,"03425467975" ,"03488329842" ,"03474837046" ,"03450749315" ,"03457774424" ,"03466318984" ,"03456706697" ,"03428627371" ,"03460456849" ,"03446917615" ,"03405739122" ,"03412040667" ,"03494814780" ,"03484271045" ,"03466793185" ,"03457800173" ,"03451394609" ,"03417400260" ,"03469635360" ,"03469709552" ,"03426065895" ,"03465558132" ,"03449862281" ,"03466138684" ,"03214938003" ,"03495308478" ,"03424462636" ,"03460684609" ,"03469815405" ,"03454359424" ,"03449089707" ,"03483647223" ,"03076768490" ,"03491222924" ,"03439995467" ,"03408069077" ,"03480714271" ,"03453688374" ,"03485283387" ,"03455233172" ,"03455503678" ,"03405617707" ,"03406161001" ,"03466474640" ,"03412217102" ,"03483597700" ,"03484464238" ,"03486466926" ,"03439159067" ,"03460595429" ,"03457807269" ,"03438388455" ,"03360205121" ,"03435673115" ,"03437907280" ,"03448992315" ,"03487648632" ,"03440432093" ,"03420400980" ,"03435076854" ,"03414549879" ,"03458595182" ,"03439216360" ,"03436868768" ,"03015852520" ,"03456739955" ,"03492139746" ,"03426384445" ,"03428523566" ,"03462654112" ,"03480031443" ,"03456309775" ,"03443633346" ,"03496648393" ,"03466858079" ,"03433825651" ,"03471210610" ,"03450042011" ,"03488418515" ,"03444010055" ,"03464596340" ,"03459137457" ,"03422567434" ,"03432086435" ,"03459823341" ,"03417167861" ,"03489634117" ,"03476572262" ,"03471000522" ,"03423124528" ,"03433905375" ,"03465204937" ,"03499418029" ,"03446674344" ,"03423283070" ,"03458151478" ,"03077098098" ,"03411565574" ,"03482815900" ,"03451694149" ,"03454223703" ,"03422940768" ,"03448000087" ,"03429480559" ,"03469353004" ,"03486382030" ,"03488195922" ,"03407018184" ,"03456020817" ,"03420286289" ,"03475172377" ,"03486931041" ,"03166260364" ,"03438737037" ,"03404904308" ,"03336000507" ,"03410018783" ,"03480307532" ,"03420586286" ,"03467238288" ,"03430434464" ,"03454353938" ,"03075975949" ,"03411932707" ,"03463590042" ,"03472187250" ,"03454014581" ,"03425006342" ,"03474595560" ,"03462352498" ,"03470343844" ,"03456771560" ,"03424256019" ,"03312537122" ,"03456364033" ,"03456307286" ,"03423066765" ,"03486363532" ,"03497264290" ,"03435365868" ,"03418405846" ,"03461926608" ,"03407066012" ,"03457984137" ,"03472889348" ,"03458816110" ,"03449639423" ,"03458011398" ,"03402364465" ,"03430748494" ,"03412726680" ,"03466204642" ,"03488426694" ,"03324146449" ,"03443065721" ,"03455799890" ,"03489845097" ,"03456797430" ,"03430835265" ,"03468264587" ,"03479507055" ,"03436964448" ,"03426668535" ,"03434258762" ,"03458603337" ,"03458755334" ,"03462654817" ,"03401576551" ,"03453607417" ,"03457879751" ,"03445339540" ,"03418346653" ,"03425901030" ,"03136972430" ,"03473848950" ,"03427705721" ,"03436037234" ,"03410018783" ,"03444200829" ,"03484342787" ,"03464724154" ,"03409791595" ,"03472863453" ,"03468480959" ,"03456387198" ,"03464132507" ,"03432970034" ,"03492047753" ,"03458073640" ,"03484539892" ,"03494108965" ,"03411545175" ,"03472400016" ,"03305490557" ,"03453234638" ,"03467307429" ,"03426772389" ,"03449816556" ,"03456850713" ,"03464857799" ,"03455941499" ,"03459798755" ,"03444263566" ,"03464725796" ,"03464986140" ,"03432349795" ,"03432822186" ,"03466560178" ,"03470832002" ,"03468415691" ,"03409404847" ,"03444310952" ,"03456195362" ,"03173244520" ,"03453512462" ,"03485913733" ,"03451941527" ,"03462086405" ,"03468811370" ,"03465752878" ,"03443070415" ,"03453444999" ,"03482173532" ,"03459389933" ,"03470745751" ,"03215091791" ,"03499675449" ,"03406794761" ,"03436709304" ,"03002457000" ,"03488873917" ,"03454817086" ,"03447583915" ,"03454126998" ,"03426114125" ,"03452886105" ,"03458299555" ,"03452888654" ,"0302948035"
    ];
    
    try{
        for(let i = 0; i < inputData.length; i++){
            if(inputData[i] && inputData[i].length === 11){
                let singleRecord = await usersRepo.getData(inputData[i]);
                if(singleRecord.length > 0){
                    singleRecord = singleRecord[0];
                    let singObject = {
                        msisdn: singleRecord.msisdn,
                        acquisition_date: singleRecord.acquisition_date,
                        number_of_success_charging: singleRecord.total_successful_chargings
                    };
    
                    if(singleRecord.acquisition_mid){
                        singObject.acquisition_source = singleRecord.acquisition_mid;
                    }else{
                        if(singleRecord.acquisition_source === 'affiliate_web'){
                            singObject.acquisition_source = 'web';
                        }else{
                            singObject.acquisition_source = singleRecord.acquisition_source;
                        }
                        
                    }
            
                    let expiryHistory = {};
                    if(singleRecord.subscription_status === 'expired'){
                        expiryHistory = await billinghistoryRepo.getExpiryHistory(singleRecord.user_id);
                        if(expiryHistory.length >= 2){
                            expiryHistory.sort(function(a,b){
                                return new Date(b.billing_dtm) - new Date(a.billing_dtm);
                            });
                        }
            
                        singObject.unsub_date = expiryHistory[0].billing_dtm;
                    }
        
                    finalResult.push(singObject);
                    console.log("=> Data done for item ", i);
                }
            }else{
                console.log("=> Invalid number or number length");
            }
        }
    
        console.log("=> Sending email");
        await randomReportWriter.writeRecords(finalResult);
        let info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk',
            to:  ["farhan.ali@dmdmax.com"],
            subject: `Complaint Data`, // Subject line
            text: `This report contains the details of msisdns being sent us over email from Zara`,
            attachments:[
                {
                    filename: randomReport,
                    path: randomReportFilePath
                }
            ]
        });
    
        console.log("=> [randomReport][emailSent]",info);
        fs.unlink(randomReportFilePath,function(err,data) {
            if (err) {
                console.log("=> File not deleted[randomReport]");
            }
            console.log("=> File deleted [randomReport]");
        });
    }catch(e){
        console.log("=> error - ",JSON.stringify(e));
    }
}

generateReportForAcquisitionSourceAndNoOfTimeUserBilled = async() => {
    console.log("=> generateReportForAcquisitionSourceAndNoOfTimeUserBilled");
    
    let finalResult = [];
    let inputData = [
        "03450790688" ,"03432661690" ,"03476265307" ,"03456774270" ,"03474911158" ,"03457088218" ,"03457206163" ,"03482106235" ,"03426571684" ,"03464623291" ,"03422924227" ,"03486822415" ,"03149494502" ,"03485331411" ,"03465141621" ,"03005687996" ,"03462674858" ,"03441166540" ,"03336743544" ,"03410435320" ,"03477340179" ,"03416679788" ,"03434983754" ,"03440040777" ,"03474623540" ,"03490463595" ,"03434783233" ,"03445619808" ,"03446044024" ,"03446587584" ,"03460274032" ,"03424628987" ,"03474987665" ,"03426344126" ,"03457176446" ,"03457029192" ,"03491495323" ,"03452221669" ,"03023527081" ,"03402064958" ,"03445792127" ,"03481160493" ,"03403062200" ,"03458824167" ,"03104080035" ,"03472355291" ,"03423970755" ,"03496229459" ,"03449117733" ,"03442324274" ,"03439700460" ,"03465125703" ,"03456162916" ,"03414120620" ,"03429908046" ,"03414442223" ,"03418885806" ,"03442120436" ,"03439634540" ,"03486411671" ,"03430766527" ,"03440029882" ,"03444677345" ,"03428120159" ,"03406941112" ,"03456123208" ,"03403329003" ,"03455332600" ,"03488381727" ,"03489057090" ,"03333730403" ,"03340747990" ,"03445199769" ,"03425540045" ,"03435669319" ,"03427737877" ,"03424454314" ,"03478177183" ,"03467522555" ,"03429612735" ,"03338003571" ,"03400800910" ,"03410312802" ,"03422697530" ,"03450248066" ,"03143778496" ,"03427615313" ,"03457757455" ,"03404283052" ,"03339848584" ,"03459500510" ,"03457613627" ,"03468704861" ,"03454842301" ,"03470879091" ,"03450414559" ,"03468865082" ,"03463914390" ,"03433083576" ,"03476991906" ,"03457465839" ,"03415545870" ,"03473240359" ,"03075055976" ,"03433287683" ,"03423361471" ,"03435125392" ,"03474169245" ,"03411505785" ,"03485796955" ,"03412003347" ,"03433929700" ,"03451279623" ,"03443710150" ,"03449598878" ,"03425474706" ,"03447354002" ,"03417789728" ,"03316700613" ,"03454091869" ,"03407884510" ,"03445701439" ,"03455848154" ,"03436856203" ,"03012443737" ,"03474169245" ,"03470095574" ,"03463954829" ,"03401113657" ,"03496398324" ,"03467357430" ,"03446405515" ,"03464994843" ,"03433030385" ,"03468233366" ,"03456745709" ,"03427774042" ,"03413342174" ,"03414494026" ,"03464054728" ,"03455056732" ,"03465676615" ,"03407884510" ,"03417601690" ,"03459000463" ,"03453778628" ,"03493468913" ,"03413511963" ,"03426060865" ,"03452656576" ,"03438236720" ,"03433416660" ,"03424218440" ,"03435050801" ,"03497548146" ,"03400905081" ,"03466024167" ,"03413332097" ,"03404090941" ,"03469567865" ,"03086339564" ,"03467083157" ,"03454816379" ,"03457396411" ,"03443885884" ,"03491990708" ,"03458827762" ,"03468978682" ,"03434206403" ,"03012443737" ,"03456578520" ,"03497508662" ,"03455269652" ,"03335605421" ,"03457513061" ,"03480430239" ,"03432153930" ,"03418631071" ,"03454615599" ,"03480605437" ,"03461463138" ,"03469402697" ,"03433011959" ,"03495788291" ,"03403199007" ,"03443888663" ,"03454659729" ,"03481910416" ,"03470891193" ,"03426277481" ,"03406348671" ,"03406322632" ,"03430786505" ,"03467996997" ,"03494344403" ,"03438966771" ,"03442919910" ,"03464289166" ,"03469680692" ,"03470305457" ,"03464289166" ,"03408047309" ,"03441258430" ,"03437603159" ,"03439455786" ,"03481986380" ,"03442366638" ,"03466248909" ,"03461727970" ,"03464289166" ,"03469853808" ,"03439874146" ,"03429376042" ,"03481013518" ,"03454098665" ,"03008814055" ,"03453630582" ,"03426958780" ,"03487373768" ,"03441153102" ,"03410622297" ,"03459740842" ,"03430300036" ,"03425646070" ,"03453623819" ,"03116614726" ,"03465107187" ,"03232671501" ,"03336738150" ,"03450622770" ,"03468266782" ,"03359010910" ,"03498901799" ,"03454171157" ,"03456001254" ,"03490989287" ,"03404991409" ,"03446351669" ,"03495491300" ,"03460233835" ,"03461356116" ,"03484155037" ,"03463599774" ,"03459386833" ,"03433056782" ,"03414545529" ,"03429991834" ,"03484543054" ,"03415061981" ,"03421587139" ,"03490477037" ,"03404125432" ,"03454416002" ,"03425352479" ,"03351425001" ,"03484134664" ,"03462567001" ,"03174563947" ,"03435965196" ,"03454835105" ,"03419793614" ,"03462628275" ,"03478402313" ,"03443919200" ,"03418700439" ,"03407207121" ,"03490558521" ,"03479340151" ,"03486072066" ,"03457131978" ,"03410730000" ,"03009155791" ,"03427445206" ,"03427770970" ,"03467086816" ,"03450564975" ,"03476538066" ,"03314131952" ,"03224489614" ,"03474311783" ,"03444501386" ,"03457273051" ,"03456635033" ,"03482300431" ,"03469896476" ,"03434244334" ,"03436051668" ,"03433971658" ,"03430448836" ,"03477581592" ,"03468061728" ,"03433632068" ,"03438023927" ,"03441084498" ,"03413495394" ,"03423427037" ,"03442867873" ,"03434244334" ,"03452412243" ,"03437828942" ,"03464402766" ,"03421540201" ,"03474365378" ,"03409623882" ,"03445355705" ,"03430018095" ,"03441700649" ,"03441182687" ,"03497069243" ,"03452297283" ,"03467485214" ,"03446016068" ,"03430270325" ,"03454938304" ,"03458176344" ,"03478090551" ,"03450915511" ,"03458763042" ,"03457898680" ,"03413847691" ,"03007756523" ,"03427729722" ,"03469114698" ,"03496866147" ,"03462004911" ,"03441487521" ,"03457008544" ,"03496014499" ,"03472335243" ,"03419512309" ,"03479164429" ,"03477314547" ,"03446714161" ,"03453670353" ,"03446105404" ,"03472629109" ,"03414093912" ,"03417126429" ,"03459333801" ,"03434479187" ,"03438966513" ,"03478881659" ,"03449370224" ,"03445413455" ,"03479715215" ,"03454943091" ,"03440579411"
    ];
    
    try{
        for(let i = 0; i < inputData.length; i++){
            if(inputData[i] && inputData[i].length === 11){
                let singleRecord = await usersRepo.getData(inputData[i]);
                if(singleRecord.length > 0){
                    singleRecord = singleRecord[0];
                    let singObject = {
                        msisdn: singleRecord.msisdn,
                        acquisition_date: singleRecord.acquisition_date,
                        number_of_success_charging: singleRecord.total_successful_chargings
                    };
    
                    if(singleRecord.acquisition_mid){
                        singObject.acquisition_source = singleRecord.acquisition_mid;
                    }else{
                        if(singleRecord.acquisition_source === 'affiliate_web'){
                            singObject.acquisition_source = 'web';
                        }else{
                            singObject.acquisition_source = singleRecord.acquisition_source;
                        }
                        
                    }
            
                    let expiryHistory = {};
                    if(singleRecord.subscription_status === 'expired'){
                        expiryHistory = await billinghistoryRepo.getExpiryHistory(singleRecord.user_id);
                        if(expiryHistory.length >= 2){
                            expiryHistory.sort(function(a,b){
                                return new Date(b.billing_dtm) - new Date(a.billing_dtm);
                            });
                        }
            
                        singObject.unsub_date = expiryHistory[0].billing_dtm;
                    }
        
                    finalResult.push(singObject);
                    console.log("=> Data done for item ", i);
                }
            }else{
                console.log("=> Invalid number or number length");
            }
        }
    
        console.log("=> Sending email");
        await randomReportWriter.writeRecords(finalResult);
        let info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk',
            to:  ["farhan.ali@dmdmax.com"],
            subject: `Complaint Data`, // Subject line
            text: `This report contains the details of msisdns being sent us over email from Zara`,
            attachments:[
                {
                    filename: randomReport,
                    path: randomReportFilePath
                }
            ]
        });
    
        console.log("=> [randomReport][emailSent]",info);
        fs.unlink(randomReportFilePath,function(err,data) {
            if (err) {
                console.log("=> File not deleted[randomReport]");
            }
            console.log("=> File deleted [randomReport]");
        });
    }catch(e){
        console.log("=> error - ",JSON.stringify(e));
    }
}

dailyReport = async(mode = 'prod') => {

    let resultToWriteToCsv= [];

    try{
        console.log("=> dailyReport");
        let today = new Date();
        let myToday = new Date(today.getFullYear(),today.getMonth(),today.getDate(),0,0,0);

        let dayBeforeYesterday = new Date(today.getFullYear(),today.getMonth(),today.getDate(),0,0,0);
        dayBeforeYesterday.setDate(dayBeforeYesterday.getDate() - 1);
        let reportStartDate = new Date("2020-02-07T00:00:00.672Z");
        let susbcriberStats = await Subscription.aggregate([
            {
                "$match": 
                {
                    "added_dtm": { "$gte": reportStartDate ,$lt: myToday  },
                    "active": true
                }
            },
            {$group: {_id: {"day": {"$dayOfMonth" : "$added_dtm"}, "month": { "$month" : "$added_dtm" },"year":{ $year: "$added_dtm" } } , count:{ $sum: 1 } } },
            {$project: {  "date":{"$dateFromParts":{ year: "$_id.year","month":"$_id.month","day":"$_id.day" }}, "count": "$count",_id:-1 }} ,
            { $sort: {"date": -1}}
        ]);

        console.log("=> dailyReport 1");
        
        let subscription_status_stats = await Subscription.aggregate([
            {
                "$match": 
                {
                    "added_dtm": { "$gte": reportStartDate ,$lt: myToday  },
                    active:true
                }
            },
            {$group: {_id: {subscription_status: "$subscription_status" } , count:{ $sum: 1 } } },
            {$project: {  "count": "$count",_id: 1 }} ,
            { $sort: {"date": -1}}
        ]);

        console.log("=> dailyReport 2");

        let totalActiveSubscribers = subscription_status_stats.reduce((accum,elem) => {
            if (elem._id.subscription_status === "trial" || elem._id.subscription_status === "graced" || elem._id.subscription_status === "billed") {
                return accum = accum + elem.count; 
            }
            return accum;
        },0);

        console.log("=> dailyReport 3");

        let userStats = await User.aggregate([
                {
                    "$match": 
                    {
                        "added_dtm": { "$gte": reportStartDate ,$lt: myToday  },
                        active:true,
                        operator:"telenor"
                    }
                },
            {$group: {_id: {"day": {"$dayOfMonth" : "$added_dtm"}, "month": { "$month" : "$added_dtm" },
            "year":{ $year: "$added_dtm" }} , count:{ $sum: 1 } } },
            {$project: {  "date":{"$dateFromParts":{ year: "$_id.year","month":"$_id.month","day":"$_id.day" }}, "count": "$count",_id:-1 }},
            {$sort: {"date": -1}} 
        ]);

        console.log("=> dailyReport 4");

        let totalUserStats = await User.countDocuments({ "added_dtm": { "$gte": reportStartDate ,$lt: myToday  },active:true } );
        console.log("=> dailyReport 4.1");
        let totalSubscriberStats = await Subscription.countDocuments({ "added_dtm": { "$gte": reportStartDate ,$lt: myToday  },active:true } );
        console.log("=> dailyReport 4.2 - ", totalSubscriberStats);
        let totalExpiredCount = await BillingHistory.countDocuments({"billing_dtm": { "$gte": reportStartDate ,$lt: myToday  },billing_status: "expired"} );
        console.log("=> dailyReport 5 - ", totalExpiredCount);

        let billingStats = await BillingHistory.aggregate([
                { $match: { "billing_status": {$in : ["Success","expired"]}, "billing_dtm": { "$gte": reportStartDate ,$lt: myToday  } } },
                {$group: {_id: {"day": {"$dayOfMonth" : "$billing_dtm"}, "month": { "$month" : "$billing_dtm" },
                    "year":{ $year: "$billing_dtm" },billing_status: "$billing_status",package_id: "$package_id" } , revenue:{ $sum: "$price" },count:{$sum: 1} } },
                {$project: {  "date":{"$dateFromParts":{ year: "$_id.year","month":"$_id.month","day":"$_id.day" }},
                    "revenue": "$revenue","count":"$count",_id:-1 }},{$sort: {"date": -1}}
        ]);
        
        console.log("=> dailyReport 6");
        
        let trialStats = await BillingHistory.aggregate([
            { $match: { "billing_status": "trial","billing_dtm": { "$gte": reportStartDate ,$lt: myToday  }  } },
            {$group: {_id: {"day": {"$dayOfMonth" : "$billing_dtm"}, "month": { "$month" : "$billing_dtm" },
                "year":{ $year: "$billing_dtm" } } , trials:{ $sum: 1 } } },
            {$project: {  "date":{"$dateFromParts":{ year: "$_id.year","month":"$_id.month","day":"$_id.day" }}, 
                "trials": "$trials",_id:-1 }},{$sort: {"date": -1}}
        ]);
        
        console.log("=> dailyReport 7");

        let resultToWrite = {};
        userStats.forEach(userStat => {
            if(userStat.date){
                resultToWrite[userStat.date.toDateString()] =  {};
            }
        });

        console.log("=> dailyReport 8");

        let totalUsers = totalUserStats;
        userStats.forEach(userStat => {
            if(userStat.date){
                resultToWrite[userStat.date.toDateString()]['newUser'] = userStat.count;
                totalUsers = totalUsers - userStat.count;
                resultToWrite[userStat.date.toDateString()]['totalUsers'] = totalUsers;
            }
        });

        console.log("=> dailyReport 9");

        var totalSubscriber = totalSubscriberStats;
        susbcriberStats.forEach(subsc => {
            if(subsc.date){
                resultToWrite[subsc.date.toDateString()]['newSubscriber'] = subsc.count;
                totalSubscriber = totalSubscriber - subsc.count;
                resultToWrite[subsc.date.toDateString()]['totalSubscribers'] = totalSubscriber;
            }
        });

        console.log("=> dailyReport 10");

        let totalExpiredCountt = totalExpiredCount;

        billingStats.forEach(billingHistor => {
            // console.log(billingHistor);
            if(resultToWrite[billingHistor.date.toDateString()] && billingHistor._id["billing_status"] === "Success") {
                console.log("billingHistor",billingHistor);
                if (billingHistor._id.package_id === "QDfC") {
                    resultToWrite[billingHistor.date.toDateString()]['revenue-liveonly'] = billingHistor.revenue;
                    resultToWrite[billingHistor.date.toDateString()]['users-billed-liveonly'] = billingHistor.count;
                }
                if (billingHistor._id.package_id === "QDfG") {
                    resultToWrite[billingHistor.date.toDateString()]['revenue-liveweekly'] = billingHistor.revenue;
                    resultToWrite[billingHistor.date.toDateString()]['users-billed-liveweekly'] = billingHistor.count;
                }
                if (billingHistor._id.package_id === "QDfH") {
                    resultToWrite[billingHistor.date.toDateString()]['revenue-comedyonly'] = billingHistor.revenue;
                    resultToWrite[billingHistor.date.toDateString()]['users-billed-comedyonly'] = billingHistor.count;
                }
                if (billingHistor._id.package_id === "QDfI") {
                    resultToWrite[billingHistor.date.toDateString()]['revenue-comedyweekly'] = billingHistor.revenue;
                    resultToWrite[billingHistor.date.toDateString()]['users-billed-comedyweekly'] = billingHistor.count;
                }
            } else if (resultToWrite[billingHistor.date.toDateString()] && billingHistor._id["billing_status"] === "expired")  {
                console.log("[dailyReport]expired On the day",billingHistor.count);
                console.log("[dailyReport]date",billingHistor.date.toDateString());
                totalExpiredCountt = totalExpiredCountt - billingHistor.count;
                console.log("[dailyReport]totalExpiredCountt",totalExpiredCountt);
                resultToWrite[billingHistor.date.toDateString()]['users_expired'] = billingHistor.count;
                resultToWrite[billingHistor.date.toDateString()]['users_expired_till_today'] = totalExpiredCountt;
            }
        });
        console.log("=> dailyReport 11");

        trialStats.forEach(trialStat => {
            if(resultToWrite[trialStat.date.toDateString()]) {
                resultToWrite[trialStat.date.toDateString()]['trials'] = trialStat.trials;
            }
        });

        console.log("=> dailyReport 12");

        // console.log("myDate",dayBeforeYesterday.toDateString());
        // console.log("myToday",resultToWrite[dayBeforeYesterday.toDateString()]);
        resultToWrite[dayBeforeYesterday.toDateString()]["tempTotalActiveSubscribers"] = totalActiveSubscribers; 

        for (res in resultToWrite) {
            let liveOnlyRevenue = (resultToWrite[res]["revenue-liveonly"])?resultToWrite[res]["revenue-liveonly"]:0;
            let liveWeeklyRevenue = (resultToWrite[res]["revenue-liveweekly"])?resultToWrite[res]["revenue-liveweekly"]:0;
            let comedyOnlyRevenue = (resultToWrite[res]["revenue-comedyonly"])?resultToWrite[res]["revenue-comedyonly"]:0 ;
            let comedyWeeklyRevenue = (resultToWrite[res]["revenue-comedyweekly"])?resultToWrite[res]["revenue-comedyweekly"]:0 ;
            
            let totalRevenue = liveOnlyRevenue + liveWeeklyRevenue + comedyOnlyRevenue + comedyWeeklyRevenue;
            
            let temp = {date: res, newUser: resultToWrite[res].newUser , newSubscriber: resultToWrite[res].newSubscriber,
                liveOnlyCount: resultToWrite[res]["users-billed-liveonly"],
                liveOnlyRevenue: liveOnlyRevenue,
                
                liveWeeklyCount: resultToWrite[res]["users-billed-liveweekly"],
                liveWeeklyRevenue: liveWeeklyRevenue,
                
                comedyOnlyCount: resultToWrite[res]["users-billed-comedyonly"],
                comedyOnlyRevenue: comedyOnlyRevenue,
                
                comedyWeeklyCount: resultToWrite[res]["users-billed-comedyweekly"],
                comedyWeeklyRevenue: comedyWeeklyRevenue,
                
                users_billed: resultToWrite[res].users_billed, trials: resultToWrite[res].trials,tempTotalActiveSubscribers: (resultToWrite[res]["tempTotalActiveSubscribers"])?resultToWrite[res]["tempTotalActiveSubscribers"]:"",
                totalUsers : resultToWrite[res].totalUsers, totalSubscribers: resultToWrite[res].totalSubscribers, 
                totalActiveSubscribers : (resultToWrite[res].totalSubscribers - resultToWrite[res].users_expired_till_today < 0)? 0 : resultToWrite[res].totalSubscribers - resultToWrite[res].users_expired_till_today,
                totalRevenue:  totalRevenue       
            }
            resultToWriteToCsv.push(temp);
        } 

        console.log("=> dailyReport 13");

    }catch(err){
        console.log("=> catch ", err);
    }

    try {  
        csvWriter.writeRecords(resultToWriteToCsv).then(async (data) => {
            var info = await transporter.sendMail({
                from: 'paywall@dmdmax.com.pk', // sender address
                //to:  ['farhan.ali@dmdmax.com'],
                to:  ["yasir.rafique@dmdmax.com","paywall@dmdmax.com.pk","mikaeel@dmdmax.com","zara.naqi@telenor.com.pk", "fahad.shabbir@ideationtec.com","ceo@ideationtec.com","asad@ideationtec.com","usama.abbasi@ideationtec.com","wasif@dmdmax.com"], // list of receivers
                subject: `Paywall Report`, // Subject ne
                text: `PFA some basic stats for Paywall - ${(new Date()).toDateString()}`, // plain text bodyday
                attachments:[
                    {
                        filename: paywallRevFileName,
                        path: paywallRevFilePath
                    }
                ]
            });
            console.log("=> dailyReport 14",info);
            fs.unlink(paywallRevFilePath,function(err,data) {
                if (err) {
                    console.log("=> [dailyReport]File not deleted");
                }
                console.log("=> [dailyReport]data");
            });
            console.log("=> [dailyReport]info",info);
        }).catch(er => {
            console.log("=> [dailyReport]err",er)
        });
        console.log("=> [dailyReport]resultToWrite",resultToWriteToCsv)
    } catch(err) {
        console.log("=> [dailyReport]",err);
    }
}

callBacksReport =async() => {
    try { 
        let startDate = new Date("2020-06-19T00:00:00.000Z");
        let report =  await Subscription.aggregate([ 
            { 
                $match: {
                        $or:[{source: "HE"},{source: "affiliate_web"}],
                        added_dtm: { $gte: startDate }
                    } 
            },
            {
                $lookup:  
                    {        
                        from: "billinghistories",        
                        localField: "_id",        
                        foreignField: "subscription_id",        
                        as: "histories" 
                    } 
            },
            { 
                $project: { 
                    tid: "$affiliate_unique_transaction_id",
                    mid: "$affiliate_mid",
                    added_dtm: "$added_dtm",
                    active: "$active",
                    callbackhistory: {
                            $filter: {
                                input: "$histories",
                                as: "histor",
                                cond: {$eq: ["$$histor.billing_status", "Affiliate callback sent" ] }
                            }
                    }
                }
            }, 
            { 
                $project: { 
                tid: "$tid",
                mid: "$mid",
                isValidUser: {$cond: {if: {$eq:["$active",true]}, then: true, else: false } },
                added_dtm: "$added_dtm",
                callbackhistorySize: {"$size": "$callbackhistory" },
                callbackObj: {$arrayElemAt: ["$callbackhistory",0]},
                added_dm: { '$dateToString' : { date: "$added_dtm",'format':'%Y-%m-%d-%H:%M:%S','timezone' : "Asia/Karachi" } },
                }
            },
            { 
                $project: { 
                tid: "$tid",
                mid: "$mid",
                isValidUser: "$isValidUser",
                callbackhistorySize: "$callbackhistorySize",
                added_dm: { '$dateToString' : { date: "$added_dtm",'format':'%Y-%m-%d-%H:%M:%S','timezone' : "Asia/Karachi" } },
                billing_dm: { '$dateToString' : { date: "$callbackObj.billing_dtm",'format':'%Y-%m-%d-%H:%M:%S','timezone' : "Asia/Karachi" } }
                }
            }, 
            { 
                $project: { 
                tid: "$tid",
                mid: "$mid",
                isValidUser: "$isValidUser",
                added_dtm:  {$cond: {if: "$isValidUser", then: "$added_dm" , else: "" } },
                isCallbAckSent: {$cond: { if: { $and: [{$gte: ["$callbackhistorySize",1]},{$eq: [ "$isValidUser",true ]} ] } ,then:"yes",else:"no" }} ,
                callBackSentTime: {$cond: {if: "$isValidUser", then: "$billing_dm" , else: "" } }  
                }
            }
        ]);

        let write = await csvReportWriter.writeRecords(report);
        var info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk', // sender address
            // to:  ["paywall@dmdmax.com.pk"],
            to:  ["paywall@dmdmax.com.pk","nauman@dmdmax.com","mikaeel@dmdmax.com"], // list of receivers
            subject: `Callbacks Report`, // Subject line
            text: `Callbacks sent with their TIDs and timestamps -  ${(new Date()).toDateString()}`, // plain text bodyday
            attachments:[
                {
                    filename: paywallCallbackReport,
                    path: paywallCallbackFilePath
                }
            ]
        });
        console.log("***> Report",info);
        fs.unlink(paywallCallbackFilePath,function(err,data) {
            if (err) {
                console.log("***> File not deleted");
            }
            console.log("***> data",data);
        });
    } catch(err) {
        console.log("***> Error", err);
    }
    
}

const errorCountReportBySource = createCsvWriter({
    path: paywallErrorCountBySourceFilePath,
    header: [
        {id: 'source', title: 'Source'},
        {id: 'errorMessage', title: 'Error Message'},
        {id: 'errorCode', title: 'Error Code'},
        {id: "count",title: "Error Count" }
    ]
});

const errorCountReportWriter = createCsvWriter({
    path: paywallErrorCountFilePath,
    header: [
        {id: 'errorMessage', title: 'Error Message'},
        {id: 'errorCode', title: 'Error Code'},
        {id: "count",title: "Error Count" }
    ]
});

const dailyUnsubReportWriter = createCsvWriter({
    path: paywallUnsubFilePath,
    header: [
        {id: 'date', title: 'Date'},
        {id: "count",title: "Unsubscribe Count" },
        {id: "source",title: "Source" }
    ]
});

const dailyChannelWiseUnsubWriter = createCsvWriter({
    path: paywallChannelWiseUnsubReportFilePath,
    header: [
        {id: 'date', title: 'Date'},
        {id: 'app', title: 'App'},
        {id: 'web', title: 'Web'},
        {id: 'sms', title: 'Sms'},
        {id: 'cc', title: 'Customer Care'},
        {id: 'cp', title: 'Customer Portal'},
        {id: 'expired', title: 'Expired By System'},
        {id: "total",title: "Total" }
    ]
});

const dailyChannelWiseTrialWriter = createCsvWriter({
    path: paywallChannelWiseTrialFilePath,
    header: [
        {id: 'date', title: 'Date'},
        {id: 'app', title: 'App'},
        {id: 'web', title: 'Web'},
        {id: 'HE', title: 'Affiliate'},
        {id: "total",title: "Total" }
    ]
});

errorCountReport = async() => {
    try {
        let errorBySourceReport = await billinghistoryRepo.errorCountReportBySource();
        console.log("=> done 1");
        let errorReport = await billinghistoryRepo.errorCountReport();
        console.log("=> done 2");
        
        await errorCountReportWriter.writeRecords(errorReport);
        await errorCountReportBySource.writeRecords(errorBySourceReport);
        var info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk', // sender address
            to:  ["farhan.ali@dmdmax.com"],
            //to:  ["paywall@dmdmax.com.pk","mikaeel@dmdmax.com"], // list of receivers
            subject: `Daily Error Reports`, // Subject line
            text: `This report (generated at ${(new Date()).toDateString()}) contains all error count stats from 23rd February 2020 onwards.`, // plain text bodyday
            attachments:[
                {
                    filename: paywallErrorCountReport,
                    path: paywallErrorCountFilePath
                },
                {
                    filename: paywallErrorCountReportBySource,
                    path: paywallErrorCountBySourceFilePath
                }
            ]
        });
        console.log("=> [errorCountReport][emailSent]",info);
        fs.unlink(paywallErrorCountFilePath,function(err,data) {
            if (err) {
                console.log("File not deleted[errorCountReport]");
            }
            console.log("File deleted [errorCountReport]");
        });
        fs.unlink(paywallErrorCountBySourceFilePath,function(err,data) {
            if (err) {
                console.log("File not deleted[errorCountReportBySource]");
            }
            console.log("File deleted [errorCountReportBySource]");
        });
    } catch (error) {
        console.error("=>", error);
    }
}

dailyUnsubReport = async(from,to) => {
    try {
        let dailyUnsubReport = await billinghistoryRepo.dailyUnsubReport();
        await dailyUnsubReportWriter.writeRecords(dailyUnsubReport);
        var info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk', // sender address
            // to:  ["hamza@dmdmax.com"],
            to:  ["paywall@dmdmax.com.pk"], // list of receivers
            subject: `Daily Unsubscribed Users Report`, // Subject line
            text: `This report (generated at ${(new Date()).toDateString()}) contains count of unsubscribed users.`, // plain text bodyday
            attachments:[
                {
                    filename: paywallUnsubReport,
                    path: paywallUnsubFilePath
                }
            ]
        });
        console.log("[dailyUnsubReport][emailSent]",info);
        fs.unlink(paywallUnsubFilePath,function(err,data) {
            if (err) {
                console.log("File not deleted[dailyUnsubReport]");
            }
            console.log("File deleted [dailyUnsubReport]");
        });
    } catch (error) {
        console.error(error);
    }
}

dailyNetAddition = async(from, to) => {
    try {
        let csvData = [];

        console.log("=> from", from, "to", to);
        let dailySubscriptions = await subscriptionRepo.getAllSubscriptionsByDate(from, to);
        let dailyUnSubscriptions = await billinghistoryRepo.unsubReport(from, to);

        for(let i = 0; i < dailySubscriptions.length; i++){
            let data = {};
            data.date = dailySubscriptions[i].date;
            if(new Date(dailySubscriptions[i].date).getTime() === new Date(dailyUnSubscriptions[i].date).getTime()){
                data.subs = dailySubscriptions[i].count;
                data.unsubs = dailyUnSubscriptions[i].count;
                data.net = (dailySubscriptions[i].count - dailyUnSubscriptions[i].count);
                csvData.push(data);
            }
        }

        await dailyNetAdditionWriter.writeRecords(csvData);
        console.log("=> Daily Addition Report");
        from = new Date(from);
        let info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk',
            to:  ["farhan.ali@dmdmax.com"],
            // to:  ["paywall@dmdmax.com.pk", "zara.naqi@telenor.com.pk", "mikaeel@dmdmax.com", "khurram.javaid@telenor.com.pk", "junaid.basir@telenor.com.pk"], // list of receivers
            subject: `Daily Net Additions - ${monthNames[from.getMonth()]}`,
            text: `This report contains daily net additions for the month of ${monthNames[from.getMonth()]}.`,
            attachments:[
                {
                    filename: dailyNetAdditionCsv,
                    path: dailyNetAdditionFilePath
                }
            ]
        });
        console.log("=> [dailyNetAdditionCsv][emailSent]",info);
        fs.unlink(dailyNetAdditionFilePath,function(err,data) {
            if (err) {
                console.log("=> File not deleted[dailyNetAdditionCsv]");
            }
            console.log("=> File deleted [dailyNetAdditionCsv]");
        });
    } catch (error) {
        console.error("=> error ", error);
    }
}

avgTransactionPerCustomer = async(from, to) => {
    try {
        console.log("=> AvgTransactionPerCustomer from", from, "to", to);
        let totalTransactions = await billinghistoryRepo.numberOfTransactions(from, to);
        totalTransactions = totalTransactions[0].count;

        let totalUniqueUsers = await billinghistoryRepo.totalUniqueTransactingUsers(from, to);
        totalUniqueUsers = totalUniqueUsers[0].count;

        let avgTransactions = totalTransactions / totalUniqueUsers;

        console.log("=> Avg. Transactions Per Customer Report");
        from = new Date(from);
        let info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk',
            to:  ["farhan.ali@dmdmax.com"],
            // to:  ["paywall@dmdmax.com.pk", "zara.naqi@telenor.com.pk", "mikaeel@dmdmax.com", "khurram.javaid@telenor.com.pk", "junaid.basir@telenor.com.pk"], // list of receivers
            subject: `Avg Transactions/Customer - ${monthNames[from.getMonth()]}`,
            text: `Avg Transactions/Customer for the month of ${monthNames[from.getMonth()]} are ${avgTransactions}`,
        });
        console.log("=> [avgTransactionPerCustomer][emailSent]",info);
    } catch (error) {
        console.error("=> avgTransactionPerCustomer- error ", error);
    }
}

weeklyRevenue = async(weekFromArray, weekToArray, emailList) => {
    try {
        let emailBody = "";

        for(let i = 0; i < weekFromArray.length; i++){
            let weekFrom = weekFromArray[i];
            let weekTo = weekToArray[i];

            console.log("=> weeklyRevenue from", weekFrom, "to", weekTo);
            let revenue = await billinghistoryRepo.getRevenueInDateRange(weekFrom, weekTo);
            emailBody = emailBody.concat(`${weekFrom} - ${weekTo}:   ${revenue[0].total}\n`);
        }

        let info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk',
            to:  emailList,
            subject: `Weekly Revenue Report - ${monthNames[weekFromArray[0].getMonth()]}`,
            text: emailBody,
        });
        console.log("=> [weeklyRevenue][emailSent]",info);
        
    } catch (error) {
        console.error("=> weeklyRevenue- error ", error);
    }
}

weeklyTransactingCustomers = async(weekFromArray, weekToArray, emailList) => {

    try {
        let emailBody = "";

        for(let i = 0; i < weekFromArray.length; i++){
            let weekFrom = weekFromArray[i];
            let weekTo = weekToArray[i];

            console.log("=> weeklyTransactingCustomers from", weekFrom, "to", weekTo);
            let totalUniqueUsers = await billinghistoryRepo.totalUniqueTransactingUsers(weekFrom, weekTo);
            emailBody = emailBody.concat(`${weekFrom} - ${weekTo}:   ${totalUniqueUsers[0].count}\n`);
        }

        let info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk',
            to:  emailList,
            subject: `Weekly Transacting Customers - ${monthNames[weekFromArray[0].getMonth()]}`,
            text: emailBody,
        });
        console.log("=> [weeklyTransactingCustomers][emailSent]",info);
        
    } catch (error) {
        console.error("=> weeklyTransactingCustomers- error ", error);
    }
}

dailyReturningUsers = async(from, to) => {
    try {
        console.log("=> DailyReturningUsers from", from, "to", to);
        let dailyReturningUsers = await billinghistoryRepo.dailyReturningUsers(from, to);
        console.log("=> DailyReturningUsers", dailyReturningUsers);
        let dailyReturningUsersCount = dailyReturningUsers[0].totalcount;
        console.log(`=> Daily Returning Users for ${to} are ${dailyReturningUsersCount}`);
        
        let info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk',
            //to:  ["farhan.ali@dmdmax.com"],
            to:  ["paywall@dmdmax.com.pk","mikaeel@dmdmax.com"],
            subject: `Daily Returning Users`,
            text: `Daily returning users for the date ${to} are ${dailyReturningUsersCount}`,
        });
        console.log("=> [dailyReturningUsers][emailSent]",info);
    } catch (error) {
        console.error("=> dailyReturningUsers- error ", error);
    }
}

dailyChannelWiseUnsub = async() => {
    try {
        console.log("=> [dailyChannelWiseUnsub]");
        let records = [];
        let dailyChannelWiseUnsub = await billinghistoryRepo.dailyChannelWiseUnsub(); 
        console.log("=> done 1"); 
        let dailyExpiredBySystem = await billinghistoryRepo.dailyExpiredBySystem();
        console.log("=> done 2");

        dailyChannelWiseUnsub.forEach(element => {
            let date = element.date;
            let source = element.source;
            let count = element.count;
            
            let present = isDatePresent(records, date);
            if(present){
                if(source === "app" || source == "na"){
                    present.app = (present.app + count);
                    present.total = (present.total + count);
                }else if(source === "web"){
                    present.web = (present.web + count);
                    present.total = (present.total + count);
                }else if(source === "sms"){
                    present.sms = (present.sms + count);
                    present.total = (present.total + count);
                }else if(source === "CC"){
                    present.cc = (present.cc + count);
                    present.total = (present.total + count);
                }else if(source === "CP"){
                    present.cp = (present.cp + count);
                    present.total = (present.total + count);
                }
            }else{
                let expiredBySystem = isDatePresent(dailyExpiredBySystem, date);
                let app = (source === "app" || source == "na") ? count : 0;
                let web = source === "web" ? count : 0;
                let sms = source === "sms" ? count : 0;
                let cc = source === "CC" ? count : 0;
                let cp = source === "CP" ? count : 0;
                let expired = expiredBySystem !== undefined ? expiredBySystem.count : 0;

                let total = (app + web + sms + cc + cp + expired);

                let object = {date: date, app: app, web: web, sms: sms, cc: cc, cp: cp, expired: expired, total: total};
                records.push(object);
            }
            
        });

        await dailyChannelWiseUnsubWriter.writeRecords(records);
        console.log("=> done 3");
        var info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk', // sender address
            // to:  ["farhan.ali@dmdmax.com"],
            to:  ["paywall@dmdmax.com.pk","nauman@dmdmax.com"], // list of receivers
            subject: `Daily Source Wise Unsubscribed Users Report`, // Subject line
            text: `This report (generated at ${(new Date()).toDateString()}) contains count of unsubscribed users with respect to source.\n\nNote: Expired By System column indicates those users expired by the system because their grace time is over and they still have no balance.`, // plain text bodyday
            attachments:[
                {
                    filename: paywallChannelWiseUnsubReport,
                    path: paywallChannelWiseUnsubReportFilePath
                }
            ]
        });
        console.log("=> [dailyChannelWiseUnsub][emailSent]",info);
        fs.unlink(paywallChannelWiseUnsubReportFilePath,function(err,data) {
            if (err) {
                console.log("=> File not deleted[dailyChannelWiseUnsub]");
            }
            console.log("=> File deleted [dailyChannelWiseUnsub]");
        });
    } catch (error) {
        console.error("=>", error);
    }
}

dailyChannelWiseTrialActivated = async() => {
    try {
        console.log("[dailyChannelWiseTrialActivated]");
        let records = [];
        let dailyChannelWiseTrial = await billinghistoryRepo.dailyChannelWiseTrialActivated(); 

        dailyChannelWiseTrial.forEach(element => {
            let date = element.date;
            let source = element.source;
            let count = element.count;
            
            let present = isDatePresent(records, date);
            if(present){
                if(source === "app"){
                    present.app = (present.app + count);
                    present.total = (present.total + count);
                }else if(source === "web"){
                    present.web = (present.web + count);
                    present.total = (present.total + count);
                }else if(source === "HE"){
                    present.HE = (present.HE + count);
                    present.total = (present.total + count);
                }
            }else{
                let app = source === "app" ? count : 0;
                let web = source === "web" ? count : 0;
                let HE = source === "HE" ? count : 0;
                let total = (app + web + HE);

                let object = {date: date, app: app, web: web, HE: HE, total: total};
                records.push(object);
            }
            
        });

        await dailyChannelWiseTrialWriter.writeRecords(records);

        var info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk', // sender address
            // to:  ["paywall@dmdmax.com.pk"],
            to:  ["paywall@dmdmax.com.pk","mikaeel@dmdmax.com"], // list of receivers
            subject: `Source Wise Trial Activated Report`, // Subject line
            text: `This report (generated at ${(new Date()).toDateString()}) contains count of trials activated with respect to source.`, // plain text bodyday
            attachments:[
                {
                    filename: paywallChannelWiseTrial,
                    path: paywallChannelWiseTrialFilePath
                }
            ]
        });
        console.log("[dailyChannelWiseTrialActivated][emailSent]",info);
        fs.unlink(paywallChannelWiseTrialFilePath,function(err,data) {
            if (err) {
                console.log("File not deleted[paywallChannelWiseTrial]");
            }
            console.log("File deleted [dailyChannelWiseTrialActivated]");
        });
    } catch (error) {
        console.error(error);
    }
}

function isDatePresent(array, dateToFind) {
    const result = array.find(o => new Date(o.date).getTime() === new Date(dateToFind).getTime());
    return result;
}

function isMultipleDatePresent(array, date1ToFind) {
    let newDate1ToFind = new Date(date1ToFind);

    const result = array.find(o =>
         new Date(o.trial_date).getTime() === newDate1ToFind.getTime()
         );
    return result;
}

dailyTrialToBilledUsers = async() => {
    try {
        console.log("=> dailyTrialToBilledUsers");
        let trialToBilled = await subscriptionRepo.dailyTrialToBilledUsers();
        let trialToBilledUsers = [];

        trialToBilled.forEach(element => {
            let trialDate = undefined;
            let BreakException = {};

            console.log("=> dailyTrialToBilledUsers 2");
            try{
                console.log("=> dailyTrialToBilledUsers 3");
                element.usershistory.forEach(subElement => {
                    if(subElement.billing_status === 'trial'){
                        trialDate = new Date(subElement.billing_dtm);
                        trialDate.setHours(0, 0, 0, 0);
                    }else if(subElement.billing_status === 'Success'){
                        let billingDate = new Date(subElement.billing_dtm);
                        billingDate.setHours(0, 0, 0, 0);

                        var trialNextDay = new Date(trialDate);
                        trialNextDay.setDate(trialNextDay.getDate() + 1);

                        if(trialNextDay.getTime() === billingDate.getTime()){
                            // Means user is billed right after next day of trial
                            let currentObj = isMultipleDatePresent(trialToBilledUsers, trialDate);
                            if(currentObj){
                                currentObj.msisdn.push({"msisdn":element.msisdn});
                                currentObj.total = (currentObj.total + 1);
                            }else{
                                //console.log('trialToBilledUsers', trialDate, ' --- ', trialNextDay, ' --- ', billingDate);
                                let object = {};
                                object.trial_date = trialDate;
                                object.billed_date = billingDate;
                                object.msisdn = [{"msisdn":element.msisdn}];
                                object.total = 1;
                                trialToBilledUsers.push(object);
                            }
                            throw BreakException;
                        }
                    }
                });
            }catch(e){
                if(e !== BreakException)
                    throw e;
            }
        });

        console.log("=> dailyTrialToBilledUsers 4");

        let today = new Date();
        today.setHours(today.getHours() - 24);
        today.setHours(0, 0, 0, 0);

        let lastTenDays = new Date();
        lastTenDays.setDate(lastTenDays.getDate() - 11);
        lastTenDays.setHours(0, 0, 0, 0);

        trialToBilledUsers.forEach(element => {
            element.msisdn = JSON.stringify(element.msisdn);
        });
        console.log("=> dailyTrialToBilledUsers 5");

        let trialToBilledUserToWr = trialToBilledUsers.sort(function (a,b){
            return   b['trial_date'] - a['trial_date'];
        })

        console.log("=> sending email");
        await csvTrialToBilledUsers.writeRecords(trialToBilledUserToWr);
        var info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk',
            to:  ["farhan.ali@dmdmax.com"],
            //to:  ["paywall@dmdmax.com.pk", "nauman@dmdmax.com", "mikaeel@dmdmax.com"], // list of receivers
            subject: 'Trial To Billed Users',
            text: `This report (generated at ${(new Date()).toDateString()}) contains count of users who are directly billed after trial from ${lastTenDays} to ${today}.\nNote: You can ignore the current date row.`, // plain text bodyday
            attachments:[
                {
                    filename: paywallTrialToBilledUsers,
                    path: paywallTrialToBilledUsersFilePath
                }
            ]
        });
        console.log("=> [trialToBilledUsers][emailSent]", info);
        fs.unlink(paywallTrialToBilledUsersFilePath,function(err,data) {
            if (err) {
                console.log("=> File not deleted");
            }
            console.log("data");
        });
    } catch (error) {
        console.error(error);
    }
}

dailyFullAndPartialChargedUsers = async() => {
    try {
        console.log("=> dailyFullAndPartialChargedUsers");
        let dailyReport = await billinghistoryRepo.getDailyFullyChargedAndPartialChargedUsers();
        console.log("=> done 1");
        let array = [];

        dailyReport.forEach(element => {
            let obj = isDatePresent(array, element.date);
            if(!obj){
                obj = {date: element.date};
                array.push(obj);
            }

            if(element.micro_charge_state === true){
                obj.partially_charged_users = element.total;
            }else{
                obj.fully_charged_users = element.total;
            }
            obj.total = obj.total ? (obj.total + element.total) : element.total;
        });

        await csvFullAndPartialCharged.writeRecords(array);
        var info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk',
            // to:  ["farhan.ali@dmdmax.com"],
            to:  ["paywall@dmdmax.com.pk",  "mikaeel@dmdmax.com", "nauman@dmdmax.com"], // list of receivers
            subject: 'Full & Partial Charged Users',
            text: `This report (generated at ${(new Date()).toDateString()}) contains count of full & partial charged users.`, // plain text bodyday
            attachments:[
                {
                    filename: paywallFullAndPartialChargedReport,
                    path: paywallFullAndPartialChargedReportFilePath
                }
            ]
        });
        console.log("=> [fullAndPartialChargedUsers][emailSent]", info);
        fs.unlink(paywallFullAndPartialChargedReportFilePath,function(err,data) {
            if (err) {
                console.log("=> File not deleted");
            }
            console.log("=> ", data);
        });
    } catch (error) {
        console.error("=>", error);
    }
}

dailyPageViews = async() => {
    console.log("***=> sending email")
    pageViews.connect().then(async(db) => {
        pageViews.getPageViews(db).then(async(pvs) => {
            console.log("***=>", pvs);
            await csvAffiliatePvs.writeRecords(pvs);
                var info = await transporter.sendMail({
                from: 'paywall@dmdmax.com.pk',
                // to:  ["hamza@dmdmax.com"],
                to:  ["paywall@dmdmax.com.pk","nauman@dmdmax.com", "mikaeel@dmdmax.com"], // list of receivers
                subject: 'Affiliate Page Views',
                text: `This report (generated at ${(new Date()).toDateString()}) contains affiliate page views`, // plain text bodyday
                attachments:[
                    {
                        filename: affiliatePvs,
                        path: affiliatePvsFilePath
                    }
                ]
            });
            console.log("***=> [csvAffiliatePvs][emailSent]", info);
            fs.unlink(affiliatePvsFilePath,function(err,data) {
                if (err) {
                    console.log("***=>File not deleted");
                }
                console.log("***=>", data);
            });
        }).catch(err => {
            console.log("***=>", err);
        });
        }).then(err => {
            console.log(err);
        });
}

getTotalUserBaseTillDate = async(from, to) => {
    let result = await usersRepo.getTotalUserBaseTillDate(from, to);
    await csvTotalBase.writeRecords(result);

    var info = await transporter.sendMail({
        from: 'paywall@dmdmax.com.pk', // sender address
        to:  ["paywall@dmdmax.com.pk", "mikaeel@dmdmax.com"],
        //to:  ["paywall@dmdmax.com.pk","zara.naqi@telenor.com.pk","mikaeel@dmdmax.com"], // list of receivers
        subject: `Paywall Total Base`, // Subject line
        text: `This report contains total user base from ${new Date(from)} to ${new Date(to)}.`,
        attachments:[
            {
                filename: paywallTotalBase,
                path: paywallTotalBaseFilePath
            }
        ]
    });
    console.log("[totalBase][emailSent]",info);
    fs.unlink(paywallTotalBaseFilePath,function(err,data) {
        if (err) {
            console.log("File not deleted[totalBase]");
        }
        console.log("File deleted [totalBase]");
    });
}

getExpiredBase = async() => {
    console.log('=> getExpiredBase');
    let result = await subscriptionRepo.getExpiredFromSystem();
    console.log('=> returned result counts ', result);
    let finalResult = [];
    for(let i = 0; i < result.length; i++){
        console.log('=>', result[i].userDetails.msisdn);
        finalResult.push({msisdn: result[i].userDetails.msisdn});
    }

    console.log('=> preparing csv - ', finalResult);

    await csvExpiredBase.writeRecords(finalResult);
    
    console.log('=> sending email');
    var info = await transporter.sendMail({
        from: 'paywall@dmdmax.com.pk', // sender address
        to:  ["farhan.ali@dmdmax.com"],
        subject: `5. Expired Base Msisdns`, // Subject line
        text: `This report contains total expired base i.e 7th Feb to date.`,
        attachments:[
            {
                filename: paywallExpiredBase,
                path: paywallExpiredBaseFilePath
            }
        ]
    });
    console.log("=> [expiredBase][emailSent]",info);
    fs.unlink(paywallExpiredBaseFilePath,function(err,data) {
        if (err) {
            console.log("=> File not deleted[expiredBase]");
        }
        console.log("=> File deleted [expiredBase]");
    });
}

getInactiveBase = async(from, to) => {
    let result = await usersRepo.getActiveUsers(from, to);

    let totalLength = result.length;
    let count = 0;
    console.log("*** Length: "+totalLength);

    let finalResult = [];
    let fiveDaysBack = new Date();
    fiveDaysBack.setDate(fiveDaysBack.getDate() - 7);

    let promise = new Promise((resolve, reject) => {
        result.forEach((user) => {
            getViewLogs(user._id).then((viewLog) => {
                console.log("*** Got result for ", user.msisdn);
    
                let latestLogTime = new Date(viewLog.added_dtm);
                if(fiveDaysBack.getTime() > latestLogTime.getTime()){
                    // Means 5 days passed user last visited app/web
                    finalResult.push({"msisdn": user.msisdn});
                }
            }).catch((err) => {
                //console.log("error ", err);
            }).finally(() => {
                console.log("*** Finally");
                count+=1;

                if (count === totalLength){
                    console.log("*** Resolved"); 
                    resolve();
                }
            });
        });
    });
    
    promise.then(async() => {
        console.log("*** ALL DONE");
        await csvInActiveBase.writeRecords(finalResult);

        var info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk', // sender address
            to:  ["paywall@dmdmax.com.pk", "mikaeel@dmdmax.com"],
            //to:  ["paywall@dmdmax.com.pk","zara.naqi@telenor.com.pk","mikaeel@dmdmax.com"], // list of receivers
            subject: `Paywall InActive Base`, // Subject line
            text: `This report contains inactive base from ${new Date(from)} to ${new Date(to)}.\nInActive: Have not opened App/Web in last 7 days but are subscribed users`,
            attachments:[
                {
                    filename: paywallInActiveBase,
                    path: paywallInActiveBaseFilePath
                }
            ]
        });
        console.log("*** [paywallInActiveBase][emailSent]",info);
        fs.unlink(paywallInActiveBaseFilePath,function(err,data) {
            if (err) {
                console.log("*** File not deleted[paywallInActiveBase]");
            }
            console.log("*** File deleted [paywallInActiveBase]");
        });
    })
}

getUsersNotSubscribedAfterSubscribe = async() => {
    try{
        let result = await billinghistoryRepo.getUsersNotSubscribedAfterSubscribe();
        console.log("=> ALL DONE");
        await ActiveBaseWriter.writeRecords(result);

        var info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk', // sender address
            to:  ["paywall@dmdmax.com.pk"],
            subject: `Users who subscribed in Jul but did subscribe in Aug`,
            text: `This report contains users who subscribed in Jul but did subscribe in Aug`,
            attachments:[
                {
                    filename: ActiveBase,
                    path: ActiveBaseFilePath
                }
            ]
        });

        console.log("=> [ActiveBaseFilePath][emailSent]",info);
        fs.unlink(ActiveBaseFilePath,function(err,data) {
            if (err) {
                console.log("=> File not deleted[ActiveBaseFilePath]");
            }
            console.log("=> File deleted [ActiveBaseFilePath]");
        });
    }catch(e){
        console.log("=>", e);
    }
}

getActiveBase = async(from, to) => {
    let result = await usersRepo.getActiveUsers(from, to);
    console.log("*** ALL DONE");
    await ActiveBaseWriter.writeRecords(result);

    var info = await transporter.sendMail({
        from: 'paywall@dmdmax.com.pk', // sender address
        to:  ["paywall@dmdmax.com.pk"],
        subject: `Paywall Active Base`, // Subject line
        text: `This report contains active base from ${new Date(from)} to ${new Date(to)}.`,
        attachments:[
            {
                filename: ActiveBase,
                path: ActiveBaseFilePath
            }
        ]
    });
    console.log("*** [ActiveBaseFilePath][emailSent]",info);
    fs.unlink(ActiveBaseFilePath,function(err,data) {
        if (err) {
            console.log("*** File not deleted[ActiveBaseFilePath]");
        }
        console.log("*** File deleted [ActiveBaseFilePath]");
    });
}

getInactiveBaseHavingViewLogsLessThan3 = async(from, to) => {
    let result = await usersRepo.getActiveUsers(from, to);
    let finalResult = [];
    let totalLength = result.length;
    let count = 0;
    console.log("*** Length: "+totalLength);

    let promise = new Promise((resolve, reject) => {
        result.forEach((user) => {
            getNumberOfViewLogs(user._id).then((count) => {
                console.log("*** Got result for ", user.msisdn, ' - ', count);
    
                if(count < 3){
                    // Means user visited app/web for once/twice
                    finalResult.push({"msisdn": user.msisdn});
                }
            }).catch((err) => {
                //console.log("error ", err);
            }).finally(() => {
                count+=1;

                if (count === totalLength){
                    console.log("*** Resolved"); 
                    resolve();
                }
            });
        });
    });
    
    promise.then(async() => {
        console.log("*** ALL DONE");
        await csvInActiveBase.writeRecords(finalResult);

        var info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk', // sender address
            to:  ["paywall@dmdmax.com.pk", "mikaeel@dmdmax.com"],
            //to:  ["paywall@dmdmax.com.pk","zara.naqi@telenor.com.pk","mikaeel@dmdmax.com"], // list of receivers
            subject: `Paywall InActive Base`, // Subject line
            text: `This report  contains inactive base from ${new Date(from)} to ${new Date(to)}.\nInActive: Users who only opened app once/twice since subscribing.`,
            attachments:[
                {
                    filename: paywallInActiveBase,
                    path: paywallInActiveBaseFilePath
                }
            ]
        });
        console.log("*** [paywallInActiveBase][emailSent]",info);
        fs.unlink(paywallInActiveBaseFilePath,function(err,data) {
            if (err) {
                console.log("*** File not deleted[paywallInActiveBase]");
            }
            console.log("*** File deleted [paywallInActiveBase]");
        });
    })
}

generateUsersReportWithTrialAndBillingHistory = async(from, to) => {
    console.log("=> generateUsersReportWithTrialAndBillingHistory - from ", from, " to ", to);
    let finalResult = [];
    
    let aff_mids = [{affiliate_mid: "goonj"},{affiliate_mid: "1569"},{affiliate_mid: "gdn"},
        {affiliate_mid: "gdn2"},{affiliate_mid: "aff3"},{affiliate_mid: "aff3a"}
    ]

    let affMidsSubscriptions = await subscriptionRepo.getSubscriptionsForAffiliateMids(aff_mids, from, to);
    
    for(let i = 0; i < affMidsSubscriptions.length; i++){
        console.log("=> fetching data for affiliate mid ",affMidsSubscriptions[i]._id);
        let subscriber_ids = affMidsSubscriptions[i].subscriber_ids;
        let result = await billinghistoryRepo.getBillingDataForSpecificSubscriberIds(subscriber_ids);
        
        for(let j = 0; j < result.length; j++){
            console.log("=> user_id", result[j].user_id);
            
            let dataPresent = isDataPresent(finalResult, result[j].user_id);
            if(dataPresent){
                if(result[j].billing_status === "Success"){
                    dataPresent.success_transactions = dataPresent.success_transactions + 1;
                    dataPresent.amount = dataPresent.amount + result[j].price;
                }else if(result[j].billing_status === "trial"){
                    dataPresent.code = 0;
                }
            }else{
                let singleObject = {};
                singleObject.mid = affMidsSubscriptions[i]._id;
                singleObject.user_id = result[j].user_id;
                
                if(result[j].billing_status === "Success"){
                    singleObject.success_transactions = 1;
                    singleObject.amount = result[j].price;
                    singleObject.code = 1;
                }else if(result[j].billing_status === "trial"){
                    singleObject.success_transactions = 0;
                    singleObject.amount = 0;
                    singleObject.code = 0
                }
                finalResult.push(singleObject);
            }
        }
    }
    
    console.log("=>", JSON.stringify(finalResult));

    console.log("=> Sending email");
    await usersReportWithTrialAndBillingHistoryWriter.writeRecords(finalResult);
    let info = await transporter.sendMail({
        from: 'paywall@dmdmax.com.pk',
        to:  ["farhan.ali@dmdmax.com"],
        subject: `Users With Trial & Billing Details`, // Subject line
        text: `This report contains affiliate users with trial and billing details from ${new Date(from)} to ${new Date(to)}.\nNote: code 0 indicates trial and code 1 indicates subscribed directly`,
        attachments:[
            {
                filename: usersReportWithTrialAndBillingHistory,
                path: usersReportWithTrialAndBillingHistoryFilePath
            }
        ]
    });

    console.log("=> [usersReportWithTrialAndBillingHistory][emailSent]",info);
    fs.unlink(usersReportWithTrialAndBillingHistoryFilePath,function(err,data) {
        if (err) {
            console.log("=> File not deleted[usersReportWithTrialAndBillingHistory]");
        }
        console.log("=> File deleted [usersReportWithTrialAndBillingHistory]");
    });
}

generateReportForAcquisitionSourceAndNoOfTimeUserBilled = async() => {
    
    console.log("=> generateReportForAcquisitionSourceAndNoOfTimeUserBilled");
    let finalResult = [];
    let inputData = ["03430875776","03445468452","03445235824","03404811033","03457075606","03487811171","03414215391","03451005178","03149494502","03422269135","03481527024","03457571470","03476882993","03455757739","03474425537","03479336134","03438880900","03428273381","03460274032","03405458115","03482210863","03447610554","03454331969","03477344114","03487724754","03403199937","03135922773","03443384250","03480609290","03448861028","03023500251","03429724165","03466518773","03169551457","03480346761","03486883673","03404820727","03496055877","03484777970","03485271965","03466476538","03459610453","03417005605","03429840915","03454549335","03457384559","03496037421","03459038280","03444055091","03410093896","03443744800","03497602705","03448679535","03481082881","03488481958","03497983508","03417664061","03453830959","03407356551","03464112627","03418018606","03445297155","03451989245","03484224839","03485270943","03418692162","03457581077","03401227327","03419790981","03469410822","03454847498","03451053380","03462156419","03479232536","03458319209","03452914560","03460178356","03409561056","03475684664","03471693905","03474893328","03443732819","03448094797","03423840772","03128612001","03452199820","03440201264","03436725887","03070153693","03414996024","03432084218","03085278849","03464157962","03452114743","03454862376","03448213708","03468959334","03436531217","03454620292","03450065303","03467737876","03449488427","03421440974","03433011347","03438765919","03424354239","03429323235","03452701714","03477368027","03469525335","03445797007","03404420315","03482842372","03453594305","03416093789","03478223025","03239823060","03457528376","03465777177","03470479162","03444346499","03447419877","03457537960","03439333675","03481712843","03475847464","03494931172","03494939497","03444109767","03468823418","03457898312","03494769522","03487653753","03437816965","03405899940","03440328970","03490219461","03465774028","03214521894","03461888184","03431381272","03457296608","03423001035","03489848076","03453464601","03488722559","03479196621","03422968995","03417535639","03455810424","03443016285","03442139178","03405137637","03445897525","03469739775","03453788358","03497307591","03434178534","03460634612","03422733454","03340013838","03475916160","03422325261","03466292882","03452373690","03416644148","03486053332","03457981802","03484020345","03426566118","03416163819","03422294391","03442848600","03407558138","03439259040","03423462289","03481671495","03472951438","03425081817","03444790106","03448985065"];
    
    try{
        for(let i = 0; i < inputData.length; i++){
            let singleRecord = await usersRepo.getData(inputData[i]);
            if(singleRecord.length > 0){
                singleRecord = singleRecord[0];
                let singObject = {
                    msisdn: singleRecord.msisdn,
                    acquisition_date: singleRecord.acquisition_date,
                    number_of_success_charging: singleRecord.total_successful_chargings
                };

                if(singleRecord.acquisition_mid){
                    singObject.acquisition_source = singleRecord.acquisition_mid;
                }else{
                    if(singleRecord.acquisition_source === 'affiliate_web'){
                        singObject.acquisition_source = 'web';
                    }else{
                        singObject.acquisition_source = singleRecord.acquisition_source;
                    }
                    
                }
        
                let expiryHistory = {};
                if(singleRecord.subscription_status === 'expired'){
                    expiryHistory = await billinghistoryRepo.getExpiryHistory(singleRecord.user_id);
                    if(expiryHistory.length >= 2){
                        expiryHistory.sort(function(a,b){
                            return new Date(b.billing_dtm) - new Date(a.billing_dtm);
                        });
                    }
        
                    singObject.unsub_date = expiryHistory[0].billing_dtm;
                }
    
                finalResult.push(singObject);
                console.log("=> Data done for item ", i);
            }
        }
    
        console.log("=> Sending email");
        await randomReportWriter.writeRecords(finalResult);
        let info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk',
            to:  ["farhan.ali@dmdmax.com"],
            subject: `Complaint Data`, // Subject line
            text: `This report contains the details of msisdns being sent us over email from Zara`,
            attachments:[
                {
                    filename: randomReport,
                    path: randomReportFilePath
                }
            ]
        });
    
        console.log("=> [randomReport][emailSent]",info);
        fs.unlink(randomReportFilePath,function(err,data) {
            if (err) {
                console.log("=> File not deleted[randomReport]");
            }
            console.log("=> File deleted [randomReport]");
        });
    }catch(e){
        console.log("=> error - ",JSON.stringify(e));
    }
}

getOnlySubscriberIds = async(source, from, to) => {
    try{
        from = new Date(from);
        to = new Date(to);
        let ids = await subscriptionRepo.getOnlySubscriberIds(source, from, to);
        console.log("=> dateWiseChargingDetails - 1");

        let details = await billinghistoryRepo.getChargingDetails(ids, from, to);
        console.log("=> Sending email");
        await dateWiseChargingDetailsWriter.writeRecords(details);

        let info = await transporter.sendMail({
            from: 'paywall@dmdmax.com.pk',
            to:  ["farhan.ali@dmdmax.com"],
            subject: `Day-wise Charging Details For ${source} - ${monthNames[from.getMonth()]}`, // Subject line
            text: `This report containg charging details of ${source}, day-wise for the month of ${monthNames[from.getMonth()]}`,
            attachments:[
                {
                    filename: dateWiseChargingDetails,
                    path: dateWiseChargingDetailsFilePath
                }
            ]
        });

        console.log("=> [dateWiseChargingDetails][emailSent]",info);
        fs.unlink(dateWiseChargingDetailsFilePath,function(err,data) {
            if (err) {
                console.log("=> File not deleted[dateWiseChargingDetails]");
            }
            console.log("=> File deleted [dateWiseChargingDetails]");
        });
    }catch(e){
        console.log("=> Error [dateWiseChargingDetails]", e);
    }
    
}

function isDataPresent(array, user_id) {
    const result = array.find(o => o.user_id === user_id);
    return result;
}

function getViewLogs(user_id){
    return new Promise(async(resolve, reject) => {
        try{
            let viewLog = await viewLogsRepo.getLatestViewLog(user_id);
            if(viewLog){
                resolve(viewLog);
            }else{
                reject("Not found");
            }
        }catch(err){
            reject(err);
        }
    });
}

function getNumberOfViewLogs(user_id){
    return new Promise(async(resolve, reject) => {
        try{
            let viewLog = await viewLogsRepo.getNumberOfViewLogs(user_id);
            if(viewLog){
                resolve(viewLog);
            }else{
                reject("Not found");
            }
        }catch(err){
            reject(err);
        }
    });
}

function getCurrentDate(){
    var dateObj = new Date();
    var month = dateObj.getMonth() + 1; //months from 1-12
    var day = dateObj.getDate();
    var year = dateObj.getFullYear();
    let newdate = day + "-" + month + "-" + year;
    return newdate;
}

module.exports = {
    dailyReport: dailyReport,
    callBacksReport: callBacksReport,
    errorCountReport: errorCountReport,
    dailyUnsubReport: dailyUnsubReport,
    dailyFullAndPartialChargedUsers: dailyFullAndPartialChargedUsers,
    dailyTrialToBilledUsers: dailyTrialToBilledUsers,
    dailyChannelWiseUnsub: dailyChannelWiseUnsub,
    dailyChannelWiseTrialActivated: dailyChannelWiseTrialActivated,
    dailyPageViews: dailyPageViews,
    getTotalUserBaseTillDate: getTotalUserBaseTillDate,
    getExpiredBase: getExpiredBase,
    getInactiveBase: getInactiveBase,
    getInactiveBaseHavingViewLogsLessThan3: getInactiveBaseHavingViewLogsLessThan3,
    dailyNetAddition: dailyNetAddition,
    avgTransactionPerCustomer: avgTransactionPerCustomer,
    dailyReturningUsers: dailyReturningUsers,
    weeklyRevenue: weeklyRevenue,
    getActiveBase: getActiveBase,
    getOnlySubscriberIds: getOnlySubscriberIds,
    weeklyTransactingCustomers: weeklyTransactingCustomers,
    generateReportForAcquisitionSourceAndNoOfTimeUserBilled: generateReportForAcquisitionSourceAndNoOfTimeUserBilled,
    generateReportForAcquisitionSourceAndNoOfTimeUserBilled2: generateReportForAcquisitionSourceAndNoOfTimeUserBilled2,
    generateReportForAcquisitionSourceAndNoOfTimeUserBilled3: generateReportForAcquisitionSourceAndNoOfTimeUserBilled3,
    generateReportForAcquisitionSourceAndNoOfTimeUserBilled4: generateReportForAcquisitionSourceAndNoOfTimeUserBilled4,
    getUsersNotSubscribedAfterSubscribe: getUsersNotSubscribedAfterSubscribe,
    generateUsersReportWithTrialAndBillingHistory:generateUsersReportWithTrialAndBillingHistory
}